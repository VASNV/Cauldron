--- ../src-base/minecraft/cpw/mods/fml/common/network/NetworkRegistry.java
+++ ../src-work/minecraft/cpw/mods/fml/common/network/NetworkRegistry.java
@@ -44,6 +44,17 @@
 import cpw.mods.fml.common.network.FMLPacket.Type;
 import cpw.mods.fml.relauncher.Side;
 
+
+// Cauldron start
+import java.io.UnsupportedEncodingException;
+import net.minecraft.inventory.IInventory;
+import net.minecraft.tileentity.TileEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.event.inventory.InventoryType;
+// Cauldron end
 /**
  * @author cpw
  *
@@ -235,14 +246,17 @@
         if ("REGISTER".equals(packet.channel))
         {
             handleRegistrationPacket(packet, (Player)handler.getPlayer());
+            handleBukkitRegistrationPacket(packet, (CraftPlayer)((NetServerHandler)(handler)).getPlayerB()); // Cauldron
         }
         else if ("UNREGISTER".equals(packet.channel))
         {
             handleUnregistrationPacket(packet, (Player)handler.getPlayer());
+            handleBukkitUnregistrationPacket(packet, (CraftPlayer)((NetServerHandler)(handler)).getPlayerB()); // Cauldron
         }
         else
         {
             handlePacket(packet, network, (Player)handler.getPlayer());
+            handler.handleVanilla250Packet(packet);  // Cauldron send it back for CB dispatch
         }
     }
 
@@ -273,6 +287,45 @@
         }
     }
 
+    // Cauldron start - handle CB plugin registration
+    private void handleBukkitRegistrationPacket(Packet250CustomPayload packet, CraftPlayer player)
+    {
+        try
+        {
+            String channels = new String(packet.data, "UTF8");
+
+            for (String channel : channels.split("\0"))
+            {
+                if (MinecraftServer.getServer().cauldronConfig.connectionLogging.getValue()) {
+                    System.out.println("adding plugin channel " + channel);
+                }
+                player.addChannel(channel);
+            }
+        }
+        catch (UnsupportedEncodingException ex)
+        {
+            throw new AssertionError(ex);
+        }
+    }
+
+    private void handleBukkitUnregistrationPacket(Packet250CustomPayload packet, CraftPlayer player)
+    {
+        try
+        {
+            String channels = new String(packet.data, "UTF8");
+
+            for (String channel : channels.split("\0"))
+            {
+                player.removeChannel(channel);
+            }
+        }
+        catch (UnsupportedEncodingException ex)
+        {
+            throw new AssertionError(ex);
+        }
+    }
+    // Cauldron end
+
     private List<String> extractChannelList(Packet250CustomPayload packet)
     {
         String request = new String(packet.data, Charsets.UTF_8);
@@ -308,6 +361,31 @@
             Container container = (Container)handler.getServerGuiElement(modGuiId, player, world, x, y, z);
             if (container != null)
             {
+                // Cauldron start - create bukkitView for passed container then fire open event.
+                if (player != null)
+                {
+                    if (container.getBukkitView() == null)
+                    {
+                        TileEntity te = player.worldObj.getBlockTileEntity(x, y, z);
+                        if (te != null && te instanceof IInventory)
+                        {
+                            IInventory teInv = (IInventory)te;
+                            CraftInventory inventory = new CraftInventory(teInv);
+                            container.bukkitView = new CraftInventoryView(player.getBukkitEntity(), inventory, container);
+                        }
+                        else
+                        {
+                            container.bukkitView = new CraftInventoryView(player.getBukkitEntity(), MinecraftServer.getServer().server.createInventory(player.getBukkitEntity(), InventoryType.CHEST), container);
+                        }
+
+                        container = CraftEventFactory.callInventoryOpenEvent(player, container, false);
+                        if (container == null)
+                        {
+                            return;
+                        }
+                    }
+                }
+                // Cauldron end
                 player.incrementWindowID();
                 player.closeContainer();
                 int windowId = player.currentWindowId;
