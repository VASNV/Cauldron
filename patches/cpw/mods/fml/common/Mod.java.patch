--- ../src-base/minecraft/cpw/mods/fml/common/Mod.java
+++ ../src-work/minecraft/cpw/mods/fml/common/Mod.java
@@ -17,6 +17,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import net.minecraft.item.ItemBlock;
 import net.minecraft.network.packet.Packet250CustomPayload;
 import cpw.mods.fml.common.event.FMLEvent;
 import cpw.mods.fml.common.event.FMLFingerprintViolationEvent;
@@ -115,6 +116,39 @@
      */
     String bukkitPlugin() default "";
     /**
+     * NOT YET IMPLEMENTED.</br>
+     * Mods that this mod will <strong>not</strong> load with.
+     * An optional comma separated string of (+|-)(*|modid[@value]) which specify mods that
+     * this mod will refuse to load with, resulting in the game failing to start.
+     * Entries can be prefixed with a + for a positive exclusion assertion, or - for a negative exclusion
+     * assertion. Asterisk is the wildcard and represents <strong>all</strong> mods.
+     *
+     * The <strong>only</strong> mods that cannot be excluded are FML and MCP, trivially.
+     * Other special values:
+     * <ul>
+     * <li>+f indicates that the mod will accept a minecraft forge environment.</li>
+     * <li>-* indicates that the mod will not accept any other mods.</li>
+     * </ul>
+     *
+     * Some examples:
+     * <ul>
+     * <li><em>-*,+f,+IronChest</em>: Will run only in a minecraft forge environment with the mod IronChests.
+     * The -* forces all mods to be excluded, then the +f and +IronChest add into the "allowed list".</li>
+     * <li><em>+f,-IC2</em>: Will run in a minecraft forge environment but will <strong>not</strong> run if
+     * IndustrialCraft 2 (IC2) is loaded alongside.</li>
+     * <li><em>-*</em>: Will not run if <strong>any</strong> othe mod is loaded except MCP/FML itself.</li>
+     * </ul>
+     *
+     * If a mod is present on the excluded list, the game will stop and show an error screen. If the
+     * class containing the {@link Mod} annotation has a "getCustomErrorException" method, it will be
+     * called to retrieve a custom error message for display in this case. If two mods have a declared
+     * exclusion which is matched, the screen that is shown is indeterminate.
+     *
+     * @return A string listing modids to exclude from loading with this mod.
+     */
+    @Deprecated
+    String modExclusionList() default "";
+    /**
      * Specifying this field allows for a mod to expect a signed jar with a fingerprint matching this value.
      * The fingerprint should be SHA-1 encoded, lowercase with ':' removed. An empty value indicates that
      * the mod is not expecting to be signed.
@@ -214,6 +248,108 @@
     public @interface EventHandler{}
 
     /**
+     * Deprecated for {@link EventHandler}<br/>
+     * Mark the designated method as to be called at if there is something wrong with the certificate fingerprint of
+     * the mod's jar, or it is missing, or otherwise a problem.
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    @Deprecated
+    public @interface FingerprintWarning {}
+    /**
+     * Deprecated for {@link EventHandler}<br/>
+     * Mark the designated method as being called at the "pre-initialization" phase
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    @Deprecated
+    public @interface PreInit {}
+    /**
+     * Deprecated for {@link EventHandler}<br/>
+     * Mark the designated method as being called at the "initialization" phase
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    @Deprecated
+    public @interface Init {}
+    /**
+     * Deprecated for {@link EventHandler}<br/>
+     * Mark the designated method as being called at the "post-initialization" phase
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    @Deprecated
+    public @interface PostInit {}
+    /**
+     * Deprecated for {@link EventHandler}<br/>
+     * Mark the designated method as being called at the "server-about-to-start" phase
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    @Deprecated
+    public @interface ServerAboutToStart {}
+    /**
+     * Deprecated for {@link EventHandler}<br/>
+     * Mark the designated method as being called at the "server-starting" phase
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    @Deprecated
+    public @interface ServerStarting {}
+    /**
+     * Deprecated for {@link EventHandler}<br/>
+     * Mark the designated method as being called at the "server-started" phase
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    @Deprecated
+    public @interface ServerStarted {}
+    /**
+     * Deprecated for {@link EventHandler}<br/>
+     * Mark the designated method as being called at the "server-stopping" phase
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    @Deprecated
+    public @interface ServerStopping {}
+    /**
+     * Deprecated for {@link EventHandler}<br/>
+     * Mark the designated method as being called at the "server-stopped" phase
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    @Deprecated
+    public @interface ServerStopped {}
+    /**
+     * Deprecated for {@link EventHandler}<br/>
+     * Mark the designated method as the receiver for {@link FMLInterModComms} messages
+     * Called between {@link Init} and {@link PostInit}
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.METHOD)
+    @Deprecated
+    public @interface IMCCallback {}
+    /**
      * Populate the annotated field with the mod instance based on the specified ModId. This can be used
      * to retrieve instances of other mods.
      * @author cpw
@@ -240,6 +376,44 @@
          */
         String value() default "";
     }
+    /**
+     * NOT IMPLEMENTED AND SCHEDULED FOR REMOVAL.<br/>
+     * Populate the annotated field with an instance of the Block as specified. This never worked. It will be removed.
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.FIELD)
+    @Deprecated
+    public @interface Block {
+        /**
+         * The block's name
+         */
+        String name();
+        /**
+         * The associated ItemBlock subtype for the item (can be null for an ItemBlock)
+         */
+        Class<?> itemTypeClass() default ItemBlock.class;
+    }
+    /**
+     * NOT IMPLEMENTED AND SCHEDULED FOR REMOVAL.<br/>
+     * Populate the annotated field with an Item. This never worked. It will be removed.
+     * @author cpw
+     *
+     */
+    @Retention(RetentionPolicy.RUNTIME)
+    @Target(ElementType.FIELD)
+    @Deprecated
+    public @interface Item {
+        /**
+         * The name of the item
+         */
+        String name();
+        /**
+         * The type of the item
+         */
+        String typeClass();
+    }
 
     /**
      * Mod instance factory method. Should return an instance of the mod. Applies only to static methods on the same class as {@link Mod}.
