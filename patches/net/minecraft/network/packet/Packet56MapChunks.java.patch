--- ../src-base/minecraft/net/minecraft/network/packet/Packet56MapChunks.java
+++ ../src-work/minecraft/net/minecraft/network/packet/Packet56MapChunks.java
@@ -10,6 +10,7 @@
 import java.util.zip.DataFormatException;
 import java.util.zip.Deflater;
 import java.util.zip.Inflater;
+import net.minecraft.world.World;
 import net.minecraft.world.chunk.Chunk;
 
 public class Packet56MapChunks extends Packet
@@ -31,11 +32,20 @@
      * nether.
      */
     private boolean skyLightSent;
-    private static byte[] chunkDataNotCompressed = new byte[0];
-    private int maxLen = 0;
+    private byte[] chunkDataNotCompressed = new byte[0]; // CraftBukkit - remove static
+    // CraftBukkit start
+    static final ThreadLocal<Deflater> localDeflater = new ThreadLocal<Deflater>()
+    {
+        @Override
+        protected Deflater initialValue()
+        {
+            // Don't use higher compression level, slows things down too much
+            return new Deflater(4); // Spigot - use lower compression level still
+        }
+    };
+    // CraftBukkit end
+    private World world; // Spigot
 
-    private Semaphore deflateGate;
-
     public Packet56MapChunks() {}
 
     public Packet56MapChunks(List par1List)
@@ -53,6 +63,19 @@
         {
             Chunk chunk = (Chunk)par1List.get(k);
             Packet51MapChunkData packet51mapchunkdata = Packet51MapChunk.getMapChunkData(chunk, true, 65535);
+            // Spigot start
+            world = chunk.worldObj;
+            /*
+            if (buildBuffer.length < j + packet51mapchunkdata.a.length) {
+                byte[] abyte = new byte[j + packet51mapchunkdata.a.length];
+
+                System.arraycopy(buildBuffer, 0, abyte, 0, buildBuffer.length);
+                buildBuffer = abyte;
+            }
+
+            System.arraycopy(packet51mapchunkdata.a, 0, buildBuffer, j, packet51mapchunkdata.a.length);
+            */
+            // Spigot end
             j += packet51mapchunkdata.compressedData.length;
             this.chunkPostX[k] = chunk.xPosition;
             this.chunkPosZ[k] = chunk.zPosition;
@@ -60,40 +83,64 @@
             this.field_73588_b[k] = packet51mapchunkdata.chunkHasAddSectionFlag;
             this.field_73584_f[k] = packet51mapchunkdata.compressedData;
         }
-        deflateGate = new Semaphore(1);
-        maxLen = j;
+
+        /* CraftBukkit start - Moved to compress()
+        Deflater deflater = new Deflater(-1);
+
+        try {
+            deflater.setInput(buildBuffer, 0, j);
+            deflater.finish();
+            this.buffer = new byte[j];
+            this.size = deflater.deflate(this.buffer);
+        } finally {
+            deflater.end();
+        }
+        */
     }
 
-    private void deflate()
+    // Add compression method
+    public void compress()
     {
-        byte[] data = new byte[maxLen];
-        int offset = 0;
-        for (int x = 0; x < field_73584_f.length; x++)
+        if (this.chunkDataBuffer != null)
         {
-            System.arraycopy(field_73584_f[x], 0, data, offset, field_73584_f[x].length);
-            offset += field_73584_f[x].length;
+            return;
         }
 
-        Deflater deflater = new Deflater(-1);
+        // Spigot start
+        int finalBufferSize = 0;
 
-        try
+        // Obfuscate all sections
+        for (int i = 0; i < field_73590_a.length; i++)
         {
-            deflater.setInput(data, 0, maxLen);
-            deflater.finish();
-            byte[] deflated = new byte[maxLen];
-            this.dataLength = deflater.deflate(deflated);
-            this.chunkDataBuffer = deflated;
+            world.spigotConfig.antiXrayInstance.obfuscate(chunkPostX[i], chunkPosZ[i], field_73590_a[i], field_73584_f[i], world);
+            finalBufferSize += field_73584_f[i].length;
         }
-        finally
+
+        // Now it's time to efficiently copy the chunk to the build buffer
+        chunkDataNotCompressed = new byte[finalBufferSize];
+        int bufferLocation = 0;
+
+        for (int i = 0; i < field_73590_a.length; i++)
         {
-            deflater.end();
+            System.arraycopy(field_73584_f[i], 0, chunkDataNotCompressed, bufferLocation, field_73584_f[i].length);
+            bufferLocation += field_73584_f[i].length;
         }
+        // Spigot end
+
+        Deflater deflater = localDeflater.get();
+        deflater.reset();
+        deflater.setInput(this.chunkDataNotCompressed);
+        deflater.finish();
+
+        this.chunkDataBuffer = new byte[this.chunkDataNotCompressed.length + 100];
+        this.dataLength = deflater.deflate(this.chunkDataBuffer);
     }
+    // CraftBukkit end
 
     /**
      * Abstract. Reads the raw packet data from the data stream.
      */
-    public void readPacketData(DataInput par1DataInput) throws IOException
+    public void readPacketData(DataInput par1DataInput) throws IOException   // CraftBukkit - throws IOException
     {
         short short1 = par1DataInput.readShort();
         this.dataLength = par1DataInput.readInt();
@@ -162,17 +209,9 @@
     /**
      * Abstract. Writes the raw packet data to the data stream.
      */
-    public void writePacketData(DataOutput par1DataOutput) throws IOException
+    public void writePacketData(DataOutput par1DataOutput) throws IOException   // CraftBukkit - throws IOException
     {
-        if (this.chunkDataBuffer == null)
-        {
-            deflateGate.acquireUninterruptibly();
-            if (this.chunkDataBuffer == null)
-            {
-                deflate();
-            }
-            deflateGate.release();
-        }
+        compress(); // CraftBukkit
         par1DataOutput.writeShort(this.chunkPostX.length);
         par1DataOutput.writeInt(this.dataLength);
         par1DataOutput.writeBoolean(this.skyLightSent);
