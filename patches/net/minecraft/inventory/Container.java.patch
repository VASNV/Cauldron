--- ../src-base/minecraft/net/minecraft/inventory/Container.java
+++ ../src-work/minecraft/net/minecraft/inventory/Container.java
@@ -8,10 +8,21 @@
 import java.util.List;
 import java.util.Set;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.MathHelper;
 
+// CraftBukkit start
+import java.util.HashMap;
+import java.util.Map;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.Event.Result;
+import org.bukkit.event.inventory.InventoryDragEvent;
+import org.bukkit.inventory.InventoryView;
+// CraftBukkit end
+
 public abstract class Container
 {
     /** the list of all items(stacks) for the corresponding slot */
@@ -23,8 +34,9 @@
     @SideOnly(Side.CLIENT)
     private short transactionID;
     private int field_94535_f = -1;
-    private int field_94536_g;
+    public int field_94536_g; // CraftBukkit - private -> public
     private final Set field_94537_h = new HashSet();
+    public InventoryView bukkitView = null; // Cauldron
 
     /**
      * list of all people that need to be notified when this craftinventory changes
@@ -32,6 +44,46 @@
     protected List crafters = new ArrayList();
     private Set playerList = new HashSet();
 
+    // CraftBukkit start
+    public boolean checkReachable = true;
+    public InventoryView getBukkitView() { return bukkitView; } // Cauldron
+    public void transferTo(Container other, org.bukkit.craftbukkit.entity.CraftHumanEntity player)
+    {
+        InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
+        // Cauldron start - add null checks to skip modded inventories with no Bukkit wrappers, and
+        // catch AbstractMethodErrors for modded IInventory's with no onClose()
+        if (source != null) {
+            try {
+                ((CraftInventory) source.getTopInventory()).getInventory().onClose(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+
+            try {
+                ((CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+        }
+        if (destination != null) {
+            try {
+                ((CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+
+            try {
+                ((CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+        }
+        // Cauldron end
+    }
+    // CraftBukkit end
+
+    public Container() {}
+
     /**
      * the slot is assumed empty
      */
@@ -39,7 +91,7 @@
     {
         par1Slot.slotNumber = this.inventorySlots.size();
         this.inventorySlots.add(par1Slot);
-        this.inventoryItemStacks.add((Object)null);
+        this.inventoryItemStacks.add(null);
         return par1Slot;
     }
 
@@ -47,7 +99,11 @@
     {
         if (this.crafters.contains(par1ICrafting))
         {
-            throw new IllegalArgumentException("Listener already listening");
+            // Cauldron start - As we do not create a new player object on respawn, we need to update the client with changes if listener already exists
+            //throw new IllegalArgumentException("Listener already listening");
+            par1ICrafting.sendContainerAndContentsToPlayer(this, this.getInventory());
+            this.detectAndSendChanges();
+            // Cauldron end
         }
         else
         {
@@ -130,6 +186,10 @@
 
     public Slot getSlot(int par1)
     {
+        // Cauldron start - vanilla compatibility. fixes NPE with ProjectRed's Item Stock Keeper
+        if (par1 < 0 || par1 >= this.inventorySlots.size())
+            return null;
+        // Cauldron end
         return (Slot)this.inventorySlots.get(par1);
     }
 
@@ -192,6 +252,7 @@
                     itemstack1 = inventoryplayer.getItemStack().copy();
                     l = inventoryplayer.getItemStack().stackSize;
                     Iterator iterator = this.field_94537_h.iterator();
+                    Map<Integer, ItemStack> draggedSlots = new HashMap<Integer, ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
 
                     while (iterator.hasNext())
                     {
@@ -214,18 +275,55 @@
                             }
 
                             l -= itemstack2.stackSize - j1;
-                            slot1.putStack(itemstack2);
+                            draggedSlots.put(slot1.slotNumber, itemstack2); // CraftBukkit - Put in map instead of setting, Should be Slot.rawSlotIndex
                         }
                     }
 
-                    itemstack1.stackSize = l;
+                    // CraftBukkit start - InventoryDragEvent
+                    InventoryView view = getBukkitView();
+                    org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack1);
+                    newcursor.setAmount(l);
+                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<Integer, org.bukkit.inventory.ItemStack>();
 
-                    if (itemstack1.stackSize <= 0)
+                    for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet())
                     {
-                        itemstack1 = null;
+                        eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
                     }
 
-                    inventoryplayer.setItemStack(itemstack1);
+                    // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+                    ItemStack oldCursor = inventoryplayer.getItemStack();
+                    inventoryplayer.setItemStack(CraftItemStack.asNMSCopy(newcursor));
+                    InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.field_94535_f == 1, eventmap); // Should be dragButton
+                    par4EntityPlayer.worldObj.getServer().getPluginManager().callEvent(event);
+                    // Whether or not a change was made to the inventory that requires an update.
+                    boolean needsUpdate = event.getResult() != Result.DEFAULT;
+
+                    if (event.getResult() != Result.DENY)
+                    {
+                        for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet())
+                        {
+                            view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
+                        }
+
+                        // The only time the carried item will be set to null is if the inventory is closed by the server.
+                        // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                        if (inventoryplayer.getItemStack() != null)
+                        {
+                            inventoryplayer.setItemStack(CraftItemStack.asNMSCopy(event.getCursor()));
+                            needsUpdate = true;
+                        }
+                    }
+                    else
+                    {
+                        inventoryplayer.setItemStack(oldCursor);
+                    }
+
+                    if (needsUpdate && par4EntityPlayer instanceof EntityPlayerMP)
+                    {
+                        ((EntityPlayerMP) par4EntityPlayer).sendContainerToPlayer(this);
+                    }
+
+                    // CraftBukkit end
                 }
 
                 this.func_94533_d();
@@ -259,10 +357,17 @@
 
                         if (par2 == 1)
                         {
-                            par4EntityPlayer.dropPlayerItem(inventoryplayer.getItemStack().splitStack(1));
+                            // CraftBukkit start - Store a reference
+                            ItemStack itemstack4 = inventoryplayer.getItemStack();
 
-                            if (inventoryplayer.getItemStack().stackSize == 0)
+                            if (itemstack4.stackSize > 0)
                             {
+                                par4EntityPlayer.dropPlayerItem(itemstack4.splitStack(1));
+                            }
+
+                            if (itemstack4.stackSize == 0)
+                            {
+                                // CraftBukkit end
                                 inventoryplayer.setItemStack((ItemStack)null);
                             }
                         }
