--- ../src-base/minecraft/net/minecraft/item/Item.java
+++ ../src-work/minecraft/net/minecraft/item/Item.java
@@ -4,6 +4,7 @@
 import com.google.common.collect.Multimap;
 
 import cpw.mods.fml.common.registry.GameData;
+import cpw.mods.fml.common.registry.ItemProxy;
 import cpw.mods.fml.relauncher.Side;
 import cpw.mods.fml.relauncher.SideOnly;
 import java.util.List;
@@ -25,6 +26,7 @@
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.potion.Potion;
 import net.minecraft.potion.PotionHelper;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.stats.StatList;
 import net.minecraft.util.Icon;
 import net.minecraft.util.MathHelper;
@@ -34,6 +36,7 @@
 import net.minecraft.util.WeightedRandomChestContent;
 import net.minecraft.world.World;
 import net.minecraftforge.common.ChestGenHooks;
+import net.minecraftforge.common.DimensionManager;
 
 public class Item
 {
@@ -272,6 +275,8 @@
         itemsList[256 + par1] = this;
 
         GameData.newItemAdded(this);
+
+        org.bukkit.Material.addMaterial(this.itemID, false); // Cauldron - many mods do not register items through GameRegistry so to be safe we need to add materials here
     }
 
     public Item setMaxStackSize(int par1)
@@ -638,7 +643,7 @@
      */
     public boolean isItemTool(ItemStack par1ItemStack)
     {
-        return this.getItemStackLimit(par1ItemStack) == 1 && this.isDamageable();
+        return this.getItemStackLimit() == 1 && this.isDamageable();
     }
 
     protected MovingObjectPosition getMovingObjectPositionFromPlayer(World par1World, EntityPlayer par2EntityPlayer, boolean par3)
@@ -928,7 +933,17 @@
      */
     public int getEntityLifespan(ItemStack itemStack, World world)
     {
-        return 6000;
+        // Cauldron start - fixes MFR proxy worlds used with grinder/slaughterhouse
+        if (world == null)
+        {
+            return 6000;
+        }
+        else if (world.spigotConfig == null)
+        {
+            return DimensionManager.getWorld(0).spigotConfig.itemDespawnRate;
+        }
+        // Cauldron end
+        return world.spigotConfig.itemDespawnRate; // Spigot
     }
 
     /**
