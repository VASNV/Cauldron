--- ../src-base/minecraft/net/minecraft/entity/player/EntityPlayer.java
+++ ../src-work/minecraft/net/minecraft/entity/player/EntityPlayer.java
@@ -27,10 +27,13 @@
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.item.EntityMinecart;
 import net.minecraft.entity.item.EntityMinecartHopper;
+import net.minecraft.entity.monster.EntityCreeper;
+import net.minecraft.entity.monster.EntityGhast;
 import net.minecraft.entity.monster.EntityMob;
 import net.minecraft.entity.monster.IMob;
 import net.minecraft.entity.passive.EntityHorse;
 import net.minecraft.entity.passive.EntityPig;
+import net.minecraft.entity.passive.EntityWolf;
 import net.minecraft.entity.projectile.EntityArrow;
 import net.minecraft.entity.projectile.EntityFishHook;
 import net.minecraft.inventory.Container;
@@ -80,6 +83,20 @@
 import net.minecraftforge.event.entity.player.PlayerDropsEvent;
 import net.minecraftforge.event.entity.player.PlayerFlyableFallEvent;
 import net.minecraftforge.event.entity.player.PlayerSleepInBedEvent;
+// CraftBukkit start
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.inventory.InventoryCloseEvent;
+import org.bukkit.event.player.PlayerBedEnterEvent;
+import org.bukkit.event.player.PlayerBedLeaveEvent;
+import org.bukkit.event.player.PlayerDropItemEvent;
+import org.bukkit.event.player.PlayerItemConsumeEvent;
+import net.minecraft.network.packet.Packet103SetSlot;
+// CraftBukkit end
 
 public abstract class EntityPlayer extends EntityLivingBase implements ICommandSender
 {
@@ -118,15 +135,25 @@
     public double field_71094_bP;
     public double field_71095_bQ;
     public double field_71085_bR;
+    // CraftBukkit start
 
     /** Boolean value indicating weather a player is sleeping or not */
-    protected boolean sleeping;
+    public boolean sleeping; // protected -> public
+    public boolean fauxSleeping;
+    public String spawnWorld = "";
 
+    @Override
+    public CraftHumanEntity getBukkitEntity()
+    {
+        return (CraftHumanEntity) super.getBukkitEntity();
+    }
+    // CraftBukkit end
+
     /**
      * The chunk coordinates of the bed the player is in (null if player isn't in a bed).
      */
     public ChunkCoordinates playerLocation;
-    public int sleepTimer;
+    public int sleepTimer; // CraftBukkit - private -> public
     public float field_71079_bU;
     @SideOnly(Side.CLIENT)
     public float field_71082_cx;
@@ -149,6 +176,7 @@
 
     /** The player's capabilities. (See class PlayerCapabilities) */
     public PlayerCapabilities capabilities = new PlayerCapabilities();
+    public int oldLevel = -1; // CraftBukkit
 
     /** The current experience level the player is on. */
     public int experienceLevel;
@@ -465,6 +493,40 @@
         {
             this.updateItemUse(this.itemInUse, 16);
             int i = this.itemInUse.stackSize;
+            // CraftBukkit start
+            org.bukkit.inventory.ItemStack craftItem = CraftItemStack.asBukkitCopy(this.itemInUse);
+            PlayerItemConsumeEvent event = new PlayerItemConsumeEvent((Player) this.getBukkitEntity(), craftItem);
+            worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                // Update client
+                if (this instanceof EntityPlayerMP)
+                {
+                    ((EntityPlayerMP) this).playerNetServerHandler.sendPacketToPlayer(new Packet103SetSlot((byte) 0, openContainer.getSlotFromInventory((IInventory) this.inventory, this.inventory.currentItem).slotIndex, this.itemInUse));
+                    // Spigot Start
+                    ((EntityPlayerMP) this).getBukkitEntity().updateInventory();
+                    ((EntityPlayerMP) this).getBukkitEntity().updateScaledHealth();
+                    // Spigot End
+                }
+
+                return;
+            }
+
+            // Plugin modified the item, process it but don't remove it
+            if (!craftItem.equals(event.getItem()))
+            {
+                CraftItemStack.asNMSCopy(event.getItem()).onFoodEaten(this.worldObj, this);
+
+                // Update client
+                if (this instanceof EntityPlayerMP)
+                {
+                    ((EntityPlayerMP) this).playerNetServerHandler.sendPacketToPlayer(new Packet103SetSlot((byte) 0, openContainer.getSlotFromInventory((IInventory) this.inventory, this.inventory.currentItem).slotIndex, this.itemInUse));
+                }
+
+                return;
+            }
+            // CraftBukkit end
             ItemStack itemstack = this.itemInUse.onFoodEaten(this.worldObj, this);
 
             if (itemstack != this.itemInUse || itemstack != null && itemstack.stackSize != i)
@@ -515,11 +577,23 @@
      */
     public void mountEntity(Entity par1Entity)
     {
-        if (this.ridingEntity != null && par1Entity == null)
+        // CraftBukkit start - mirror Entity mount changes
+        this.setPassengerOf(par1Entity);
+    }
+
+    public void setPassengerOf(Entity entity)
+    {
+        // CraftBukkit end
+        if (this.ridingEntity != null && entity == null)
         {
+            this.worldObj.getServer().getPluginManager().callEvent(new org.spigotmc.event.entity.EntityDismountEvent(this.getBukkitEntity(), this.ridingEntity.getBukkitEntity()));
+            // CraftBukkit start - use parent method instead to correctly fire VehicleExitEvent
+            Entity originalVehicle = this.ridingEntity;
+            // First statement moved down, second statement handled in parent method.
+            /*
             if (!this.worldObj.isRemote)
             {
-                this.dismountEntity(this.ridingEntity);
+                this.func_110145_l(this.ridingEntity);
             }
 
             if (this.ridingEntity != null)
@@ -528,10 +602,19 @@
             }
 
             this.ridingEntity = null;
+            */
+            super.setPassengerOf(entity);
+
+            if (!this.worldObj.isRemote && this.ridingEntity == null)
+            {
+                this.dismountEntity(originalVehicle);
+            }
+
+            // CraftBukkit end
         }
         else
         {
-            super.mountEntity(par1Entity);
+            super.setPassengerOf(entity); // CraftBukkit - call new parent
         }
     }
 
@@ -600,7 +683,8 @@
 
         if (this.worldObj.difficultySetting == 0 && this.getHealth() < this.getMaxHealth() && this.worldObj.getGameRules().getGameRuleBooleanValue("naturalRegeneration") && this.ticksExisted % 20 * 12 == 0)
         {
-            this.heal(1.0F);
+            // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
+            this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN);
         }
 
         this.inventory.decrementAnimations();
@@ -622,7 +706,7 @@
 
         this.setAIMoveSpeed((float)attributeinstance.getAttributeValue());
         float f = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-        float f1 = (float)Math.atan(-this.motionY * 0.20000000298023224D) * 15.0F;
+        float f1 = (float) org.bukkit.craftbukkit.TrigMath.atan(-this.motionY * 0.20000000298023224D) * 15.0F;  // CraftBukkit - Math -> TrigMath
 
         if (f > 0.1F)
         {
@@ -657,7 +741,7 @@
 
             List list = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, axisalignedbb);
 
-            if (list != null)
+            if (list != null && this.canBePushed()) // Spigot: Add this.canBePushed() condition
             {
                 for (int i = 0; i < list.size(); ++i)
                 {
@@ -758,12 +842,14 @@
     public void addToPlayerScore(Entity par1Entity, int par2)
     {
         this.addScore(par2);
-        Collection collection = this.getWorldScoreboard().func_96520_a(ScoreObjectiveCriteria.totalKillCount);
+        // CraftBukkit - Get our scores instead
+        Collection<Score> collection = this.worldObj.getServer().getScoreboardManager().getScoreboardScores(ScoreObjectiveCriteria.totalKillCount, this.getEntityName(), new java.util.ArrayList<Score>());
 
         if (par1Entity instanceof EntityPlayer)
         {
             this.addStat(StatList.playerKillsStat, 1);
-            collection.addAll(this.getWorldScoreboard().func_96520_a(ScoreObjectiveCriteria.playerKillCount));
+            // CraftBukkit - Get our scores instead
+            this.worldObj.getServer().getScoreboardManager().getScoreboardScores(ScoreObjectiveCriteria.playerKillCount, this.getEntityName(), collection);
         }
         else
         {
@@ -774,8 +860,7 @@
 
         while (iterator.hasNext())
         {
-            ScoreObjective scoreobjective = (ScoreObjective)iterator.next();
-            Score score = this.getWorldScoreboard().func_96529_a(this.getEntityName(), scoreobjective);
+            Score score = (Score) iterator.next(); // CraftBukkit - Use our scores instead
             score.func_96648_a();
         }
     }
@@ -852,6 +937,18 @@
                 entityitem.motionZ += Math.sin((double)f1) * (double)f;
             }
 
+            // CraftBukkit start
+            Player player = (Player) this.getBukkitEntity();
+            CraftItem drop = new CraftItem(this.worldObj.getServer(), entityitem);
+            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled())
+            {
+                player.getInventory().addItem(drop.getItemStack());
+                return null;
+            }
+            // CraftBukkit end
             this.joinEntityItemWithWorld(entityitem);
             this.addStat(StatList.dropStat, 1);
             return entityitem;
@@ -962,6 +1059,14 @@
             this.wakeUpPlayer(true, true, false);
         }
 
+        // CraftBukkit start
+        this.spawnWorld = par1NBTTagCompound.getString("SpawnWorld");
+
+        if ("".equals(spawnWorld))
+        {
+            this.spawnWorld = this.worldObj.getServer().getWorlds().get(0).getName();
+        }
+        // CraftBukkit end
         if (par1NBTTagCompound.hasKey("SpawnX") && par1NBTTagCompound.hasKey("SpawnY") && par1NBTTagCompound.hasKey("SpawnZ"))
         {
             this.spawnChunk = new ChunkCoordinates(par1NBTTagCompound.getInteger("SpawnX"), par1NBTTagCompound.getInteger("SpawnY"), par1NBTTagCompound.getInteger("SpawnZ"));
@@ -1007,6 +1112,7 @@
             par1NBTTagCompound.setInteger("SpawnY", this.spawnChunk.posY);
             par1NBTTagCompound.setInteger("SpawnZ", this.spawnChunk.posZ);
             par1NBTTagCompound.setBoolean("SpawnForced", this.spawnForced);
+            par1NBTTagCompound.setString("SpawnWorld", spawnWorld); // CraftBukkit - fixes bed spawns for multiworld worlds
         }
         NBTTagList spawnlist = new NBTTagList();
         for (Entry<Integer, ChunkCoordinates> entry : this.spawnChunkMap.entrySet()) {
@@ -1098,7 +1204,7 @@
                 {
                     if (this.worldObj.difficultySetting == 0)
                     {
-                        par2 = 0.0F;
+                        return false; // CraftBukkit - i = 0 -> return false
                     }
 
                     if (this.worldObj.difficultySetting == 1)
@@ -1112,7 +1218,7 @@
                     }
                 }
 
-                if (par2 == 0.0F)
+                if (false && par2 == 0.0F)   // CraftBukkit - Don't filter out 0 damage
                 {
                     return false;
                 }
@@ -1134,11 +1240,81 @@
 
     public boolean canAttackPlayer(EntityPlayer par1EntityPlayer)
     {
-        Team team = this.getTeam();
-        Team team1 = par1EntityPlayer.getTeam();
-        return team == null ? true : (!team.isSameTeam(team1) ? true : team.getAllowFriendlyFire());
+        // CraftBukkit start - Change to check OTHER player's scoreboard team according to API
+        // To summarize this method's logic, it's "Can parameter hurt this"
+        org.bukkit.scoreboard.Team team;
+
+        if (par1EntityPlayer instanceof EntityPlayerMP)
+        {
+            EntityPlayerMP thatPlayer = (EntityPlayerMP) par1EntityPlayer;
+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+
+            if (team == null || team.allowFriendlyFire())
+            {
+                return true;
+            }
+        }
+        else
+        {
+            // This should never be called, but is implemented anyway
+            org.bukkit.OfflinePlayer thisPlayer = par1EntityPlayer.worldObj.getServer().getOfflinePlayer(par1EntityPlayer.username);
+            team = par1EntityPlayer.worldObj.getServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+
+            if (team == null || team.allowFriendlyFire())
+            {
+                return true;
+            }
+        }
+
+        if (this instanceof EntityPlayerMP)
+        {
+            return !team.hasPlayer(((EntityPlayerMP) this).getBukkitEntity());
+        }
+
+        return !team.hasPlayer(this.worldObj.getServer().getOfflinePlayer(this.username));
+        // CraftBukkit end
     }
 
+    /**
+     * Called when the player attack or gets attacked, it's alert all wolves in the area that are owned by the player to
+     * join the attack or defend the player.
+     */
+    protected void alertWolves(EntityLivingBase par1EntityLivingBase, boolean par2)
+    {
+        if (!(par1EntityLivingBase instanceof EntityCreeper) && !(par1EntityLivingBase instanceof EntityGhast))
+        {
+            if (par1EntityLivingBase instanceof EntityWolf)
+            {
+                EntityWolf entitywolf = (EntityWolf)par1EntityLivingBase;
+
+                if (entitywolf.isTamed() && this.username.equals(entitywolf.getOwnerName()))
+                {
+                    return;
+                }
+            }
+
+            if (!(par1EntityLivingBase instanceof EntityPlayer) || this.canAttackPlayer((EntityPlayer)par1EntityLivingBase))
+            {
+                if (!(par1EntityLivingBase instanceof EntityHorse) || !((EntityHorse)par1EntityLivingBase).isTame())
+                {
+                    List list = this.worldObj.getEntitiesWithinAABB(EntityWolf.class, AxisAlignedBB.getAABBPool().getAABB(this.posX, this.posY, this.posZ, this.posX + 1.0D, this.posY + 1.0D, this.posZ + 1.0D).expand(16.0D, 4.0D, 16.0D));
+                    Iterator iterator = list.iterator();
+
+                    while (iterator.hasNext())
+                    {
+                        EntityWolf entitywolf1 = (EntityWolf)iterator.next();
+
+                        if (entitywolf1.isTamed() && entitywolf1.getEntityToAttack() == null && this.username.equals(entitywolf1.getOwnerName()) && (!par2 || !entitywolf1.isSitting()))
+                        {
+                            entitywolf1.setSitting(false);
+                            entitywolf1.setTarget(par1EntityLivingBase);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
     protected void damageArmor(float par1)
     {
         this.inventory.damageArmor(par1);
@@ -1256,7 +1432,8 @@
 
                 if (itemstack.func_111282_a(this, (EntityLivingBase)par1Entity))
                 {
-                    if (itemstack.stackSize <= 0 && !this.capabilities.isCreativeMode)
+                    // CraftBukkit - bypass infinite items; <= 0 -> == 0
+                    if (itemstack.stackSize == 0 && !this.capabilities.isCreativeMode)
                     {
                         this.destroyCurrentEquippedItem();
                     }
@@ -1366,6 +1543,16 @@
 
                     boolean flag2 = par1Entity.attackEntityFrom(DamageSource.causePlayerDamage(this), f);
 
+                    // CraftBukkit start - Return when the damage fails so that the item will not lose durability
+                    if (!flag2)
+                    {
+                        if (flag1)
+                        {
+                            par1Entity.extinguish();
+                        }
+                        return;
+                    }
+                    // CraftBukkit end
                     if (flag2)
                     {
                         if (i > 0)
@@ -1416,7 +1603,8 @@
                     {
                         itemstack.hitEntity((EntityLivingBase)object, this);
 
-                        if (itemstack.stackSize <= 0)
+                        // CraftBukkit - bypass infinite items; <= 0 -> == 0
+                        if (itemstack.stackSize == 0)
                         {
                             this.destroyCurrentEquippedItem();
                         }
@@ -1424,11 +1612,22 @@
 
                     if (par1Entity instanceof EntityLivingBase)
                     {
+                        if (par1Entity.isEntityAlive())
+                        {
+                            this.alertWolves((EntityLivingBase)par1Entity, true);
+                        }
                         this.addStat(StatList.damageDealtStat, Math.round(f * 10.0F));
 
                         if (j > 0 && flag2)
                         {
-                            par1Entity.setFire(j * 4);
+                            // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+                            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), par1Entity.getBukkitEntity(), j * 4);
+                            org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+                            if (!combustEvent.isCancelled())
+                            {
+                                par1Entity.setFire(combustEvent.getDuration());
+                            }
+                            // CraftBukkit end
                         }
                         else if (flag1)
                         {
@@ -1462,6 +1661,10 @@
 
         if (this.openContainer != null)
         {
+            // CraftBukkit start
+            InventoryCloseEvent event = new InventoryCloseEvent(this.openContainer.getBukkitView());
+            if (this.openContainer.getBukkitView() != null) Bukkit.getServer().getPluginManager().callEvent(event); // Cauldron - allow vanilla mods to bypass
+            // CraftBukkit end
             this.openContainer.onContainerClosed(this);
         }
     }
@@ -1522,6 +1725,21 @@
             this.mountEntity((Entity)null);
         }
 
+        // CraftBukkit start
+        if (this.getBukkitEntity() instanceof Player)
+        {
+            Player player = (Player) this.getBukkitEntity();
+            org.bukkit.block.Block bed = this.worldObj.getWorld().getBlockAt(par1, par2, par3);
+            PlayerBedEnterEvent bedEvent = new PlayerBedEnterEvent(player, bed);
+            this.worldObj.getServer().getPluginManager().callEvent(bedEvent);
+
+            if (bedEvent.isCancelled())
+            {
+                return EnumStatus.OTHER_PROBLEM;
+            }
+        }
+        // CraftBukkit end
+
         this.setSize(0.2F, 0.2F);
         this.yOffset = 0.2F;
 
@@ -1626,6 +1844,25 @@
             this.worldObj.updateAllPlayersSleepingFlag();
         }
 
+        // CraftBukkit start
+        if (this.getBukkitEntity() instanceof Player)
+        {
+            Player player = (Player) this.getBukkitEntity();
+            org.bukkit.block.Block bed;
+
+            if (chunkcoordinates != null)
+            {
+                bed = this.worldObj.getWorld().getBlockAt(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ);
+            }
+            else
+            {
+                bed = this.worldObj.getWorld().getBlockAt(player.getLocation());
+            }
+
+            PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+        }
+        // CraftBukkit end
         if (par1)
         {
             this.sleepTimer = 0;
@@ -1812,11 +2049,13 @@
         {
             this.spawnChunk = new ChunkCoordinates(par1ChunkCoordinates);
             this.spawnForced = par2;
+            this.spawnWorld = this.worldObj.worldInfo.getWorldName(); // CraftBukkit
         }
         else
         {
             this.spawnChunk = null;
             this.spawnForced = false;
+            this.spawnWorld = ""; // CraftBukkit
         }
     }
     /**
@@ -2409,9 +2648,9 @@
     @SideOnly(Side.CLIENT)
 
     /**
-     * Only used by renderer in EntityLivingBase subclasses.nDetermines if an entity is visible or not to a specfic
-     * player, if the entity is normally invisible.nFor EntityLivingBase subclasses, returning false when invisible will
-     * render the entity semitransparent.
+     * Only used by renderer in EntityLivingBase subclasses.\nDetermines if an entity is visible or not to a specfic
+     * player, if the entity is normally invisible.\nFor EntityLivingBase subclasses, returning false when invisible
+     * will render the entity semitransparent.
      */
     public boolean isInvisibleToPlayer(EntityPlayer par1EntityPlayer)
     {
