--- ../src-base/minecraft/net/minecraft/world/SpawnerAnimals.java
+++ ../src-work/minecraft/net/minecraft/world/SpawnerAnimals.java
@@ -1,11 +1,7 @@
 package net.minecraft.world;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
+import java.util.*;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.EntityLiving;
@@ -19,14 +15,17 @@
 import net.minecraft.world.biome.SpawnListEntry;
 import net.minecraft.world.chunk.Chunk;
 
-import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.Event.Result;
 import net.minecraftforge.event.ForgeEventFactory;
+// CraftBukkit start
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.craftbukkit.util.LongObjectHashMap;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+// CraftBukkit end
 
 public final class SpawnerAnimals
 {
-    /** The 17x17 area around the player where mobs can spawn */
-    private HashMap eligibleChunksForSpawning = new HashMap();
+    private LongObjectHashMap<Boolean> eligibleChunksForSpawning = new LongObjectHashMap<Boolean>(); // CraftBukkit - HashMap -> LongObjectHashMap
 
     /**
      * Given a chunk, find a random position in it.
@@ -62,22 +61,30 @@
                 int k = MathHelper.floor_double(entityplayer.posX / 16.0D);
                 j = MathHelper.floor_double(entityplayer.posZ / 16.0D);
                 byte b0 = 8;
+                // Spigot Start
+                b0 = par1WorldServer.spigotConfig.mobSpawnRange;
+                b0 = (b0 > par1WorldServer.spigotConfig.viewDistance) ? (byte) par1WorldServer.spigotConfig.viewDistance : b0;
+                b0 = (b0 > 8) ? 8 : b0;
+                // Spigot End
 
                 for (int l = -b0; l <= b0; ++l)
                 {
                     for (int i1 = -b0; i1 <= b0; ++i1)
                     {
                         boolean flag3 = l == -b0 || l == b0 || i1 == -b0 || i1 == b0;
-                        ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(l + k, i1 + j);
+                        // CraftBukkit start
+                        long chunkCoords = LongHash.toLong(l + k, i1 + j);
 
                         if (!flag3)
                         {
-                            this.eligibleChunksForSpawning.put(chunkcoordintpair, Boolean.valueOf(false));
+                            eligibleChunksForSpawning.put(chunkCoords, false);
                         }
-                        else if (!this.eligibleChunksForSpawning.containsKey(chunkcoordintpair))
+                        else if (!eligibleChunksForSpawning.containsKey(chunkCoords))
                         {
-                            this.eligibleChunksForSpawning.put(chunkcoordintpair, Boolean.valueOf(true));
+                            eligibleChunksForSpawning.put(chunkCoords, true);
                         }
+
+                        // CraftBukkit end
                     }
                 }
             }
@@ -90,22 +97,46 @@
             for (int j1 = 0; j1 < j; ++j1)
             {
                 EnumCreatureType enumcreaturetype = aenumcreaturetype[j1];
+                // CraftBukkit start - Use per-world spawn limits
+                int limit = enumcreaturetype.getMaxNumberOfCreature();
 
-                if ((!enumcreaturetype.getPeacefulCreature() || par3) && (enumcreaturetype.getPeacefulCreature() || par2) && (!enumcreaturetype.getAnimal() || par4) && par1WorldServer.countEntities(enumcreaturetype, true) <= enumcreaturetype.getMaxNumberOfCreature() * this.eligibleChunksForSpawning.size() / 256)
+                switch (enumcreaturetype)
                 {
+                    case monster:
+                        limit = par1WorldServer.getWorld().getMonsterSpawnLimit();
+                        break;
+                    case creature:
+                        limit = par1WorldServer.getWorld().getAnimalSpawnLimit();
+                        break;
+                    case waterCreature:
+                        limit = par1WorldServer.getWorld().getWaterAnimalSpawnLimit();
+                        break;
+                    case ambient:
+                        limit = par1WorldServer.getWorld().getAmbientSpawnLimit();
+                        break;
+                }
+
+                if (limit == 0)
+                {
+                    continue;
+                }
+
+                // CraftBukkit end
+
+                if ((!enumcreaturetype.getPeacefulCreature() || par3) && (enumcreaturetype.getPeacefulCreature() || par2) && (!enumcreaturetype.getAnimal() || par4) && par1WorldServer.countEntities(enumcreaturetype.getCreatureClass()) <= limit * eligibleChunksForSpawning.size() / 256)   // CraftBukkit - use per-world limits
+                {
                     Iterator iterator = this.eligibleChunksForSpawning.keySet().iterator();
-                    ArrayList<ChunkCoordIntPair> tmp = new ArrayList(eligibleChunksForSpawning.keySet());
-                    Collections.shuffle(tmp);
-                    iterator = tmp.iterator();
                     label110:
 
                     while (iterator.hasNext())
                     {
-                        ChunkCoordIntPair chunkcoordintpair1 = (ChunkCoordIntPair)iterator.next();
+                        // CraftBukkit start
+                        long key = ((Long) iterator.next()).longValue();
 
-                        if (!((Boolean)this.eligibleChunksForSpawning.get(chunkcoordintpair1)).booleanValue())
+                        if (!eligibleChunksForSpawning.get(key))
                         {
-                            ChunkPosition chunkposition = getRandomSpawningPointInChunk(par1WorldServer, chunkcoordintpair1.chunkXPos, chunkcoordintpair1.chunkZPos);
+                            ChunkPosition chunkposition = getRandomSpawningPointInChunk(par1WorldServer, LongHash.msw(key), LongHash.lsw(key));
+                            // CraftBukkit end
                             int k1 = chunkposition.x;
                             int l1 = chunkposition.y;
                             int i2 = chunkposition.z;
@@ -178,7 +209,7 @@
                                                             if (canSpawn == Result.ALLOW || (canSpawn == Result.DEFAULT && entityliving.getCanSpawnHere()))
                                                             {
                                                                 ++j2;
-                                                                par1WorldServer.spawnEntityInWorld(entityliving);
+                                                                par1WorldServer.addEntity(entityliving, SpawnReason.NATURAL); // CraftBukkit - Added a reason for spawning this creature, moved entityliving.a(entitylivingdata) up
                                                                 if (!ForgeEventFactory.doSpecialSpawn(entityliving, par1WorldServer, f, f1, f2))
                                                                 {
                                                                     entitylivingdata = entityliving.onSpawnWithEgg(entitylivingdata);
@@ -280,7 +311,7 @@
                             }
 
                             entityliving.setLocationAndAngles((double)f, (double)f1, (double)f2, par6Random.nextFloat() * 360.0F, 0.0F);
-                            par0World.spawnEntityInWorld(entityliving);
+                            par0World.addEntity(entityliving, SpawnReason.CHUNK_GEN); // CraftBukkit - Added a reason for spawning this creature, moved entityliving.a(entitylivingdata) up
                             entitylivingdata = entityliving.onSpawnWithEgg(entitylivingdata);
                             flag = true;
                         }
